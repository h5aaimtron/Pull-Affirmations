name: Auto-affirm txt PRs

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-and-affirm:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout base branch to read affirmations
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.ref }}

    - name: Validate PR and optionally affirm
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const pr = context.payload.pull_request;

          // Check for affirmations.txt
          const path = 'affirmations.txt';
          if (!fs.existsSync(path)) {
            core.setFailed("affirmations.txt not found in the base branch.");
            return;
          }

          const lines = fs.readFileSync(path, 'utf-8')
                          .split(/\r?\n/)
                          .filter(line => line.trim() !== '');
          if (lines.length === 0) {
            core.setFailed("affirmations.txt is empty.");
            return;
          }

          const affirmation = lines[Math.floor(Math.random() * lines.length)];

          // Validate file list and size
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });

          let totalSize = 0;
          for (const file of files) {
            if (!file.filename.endsWith('.txt')) {
              core.setFailed(`❌ Non-txt file found: ${file.filename}`);
              return;
            }
            if (file.status !== 'removed') {
              totalSize += file.changes || 0;
            }
          }

          if (totalSize > 5120) {
            core.setFailed(`❌ Total txt file size exceeds 5KB (${totalSize} bytes)`);
            return;
          }

          // If from a fork, log instead of commenting
          const isFork = pr.head.repo.full_name !== pr.base.repo.full_name;
          if (isFork) {
            core.notice(`✅ Fork PR passed! Here's your affirmation:\n${affirmation}`);
          }

          // Comment on PR (same-repo only)
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            body: `✅ ${affirmation}`
          });

          // Optional: Add a label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['auto-affirmed']
          });

          // Closes the PR with green check.
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number,
            state: "closed"
          });
